# shamelessly borrowed from sqlcollabortive/dbatools/.github/workflows/tests.yml
name: Run SQL Tests
on: [push]
defaults:
  run:
    shell: pwsh
jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      # GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      # Following are standard MSSQL environment variables
      # I'm not working with the SQL Agent here, so I don't need to enable it.
      # MSSQL_AGENT_ENABLED: True
      MSSQL_SA_PASSWORD: ${{secrets.SAPASSWORD}}
      ACCEPT_EULA: Y
      MSSQL_PID: Developer
    steps:
      - uses: actions/checkout@v2

      #########
      # I am building this command up as I figure out what is available and what I can do
      #
      # Setting 'trusted' was recommended by @potatoqualitee in a YouTube talk I watched 2021/07/30.
      # I need a command to 'run stuff on SQL', I originally choose microsoft\sqlserver\invoke-sqlcmd even though sqlcollaborative\invoke-sqlcmd2\invoke-sqlcmd2 is better.
      # Maybe sqlserver isn't available. The docs I've read indicate that it would be, but when this ran, the log said that it couldn't find Invoke-Sqlcmd.
      # I'll try installing invoke-sqlcmd2 and using that, instead.
      #
      # do I need to build a $Credential using sa and the password from then environment?
      - name: Install Pre-Requisites
        run: |
          Get-Module -listavailable -Name dbatools,sqlserver,pester,invoke-sqlcmd2
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
          Install-Module -Name dbatools -RequiredVersion '1.0.161' -verbose
          Install-Module -Name invoke-sqlcmd2 -verbose

      #########
      # original uses a pair of custom-built dbatools sql images. I changed that to use the generic images from MS.
      # I also removed the additional port mappings, I believe that's just for db mirroring (which gets tested using those images)
      # and we do not need that...
      #
      # I do not need two instances running and the version of SQL Server is not important, I'll keep this here for safekeeping.
      # docker run -p 14333:1433 -e ACCEPT_EULA=Y --network localnet --hostname dockersql2019 --name dockersql2019 --mount 'source=shared,target=/shared' -d mcr.microsoft.com/mssql/server:2019-latest
      #
      # I am not sure if I need to specify -e  sa_password=<SA_PASSWORD> here or if it 'gets it' from the above env: section
      # If I have to specify this a -e just for the password, I'm not sure of the exact syntax.
      # People say that MSSQL_SA_PASSWORD and SA_PASSWORD both work
      #
      - name:  Setup docker images
        run: |
          # create a shared network
          docker network create localnet
          # create a shared volume
          docker volume create shared
          # setup container and expose port
          docker run -p 1433:1433 -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Hello#world2" --network localnet --hostname dockersql2017 --name dockersql2017 --mount 'source=shared,target=/shared' -d mcr.microsoft.com/mssql/server:2017-latest
          # Question: do I only get SQL in this step, or is it "up" until all of my steps complete?
          sleep 5
          $query = "SELECT 'zerotry' as EventName, GETDATE() RightNow, SUSER_SNAME() WhoamI, @@SERVERNAME as ServerName, @@VERSION as SqlServerVersion"
          docker exec -it dockersql2017 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P Hello#world2 -Q $query
          Invoke-SqlCmd2 -ServerInstance dockersql2017 -query "select 'firsttry' as EventName, GETDATE() RightNow, SUSER_SNAME() WhoamI, @@SERVERNAME as ServerName, @@VERSION as SqlServerVersion "
          Invoke-SqlCmd2 -ServerInstance localhost -query "select 'just-localhost' as EventName, GETDATE() RightNow, SUSER_SNAME() WhoamI, @@SERVERNAME as ServerName, @@VERSION as SqlServerVersion "


      - name: Run a SQL Statement
        run: |
          Invoke-SqlCmd2 -ServerInstance dockersql2017 -query "select GETDATE() RightNow, SUSER_SNAME() WhoamI, @@SERVERNAME as ServerName, @@VERSION as SqlServerVersion "

      - name: Run a Pester Test
        run: |
          Invoke-Pester .\Tests

      # I don't think I will ever need the following, which I borrowed from dbatools.
      # appveyor was "the thing" before GitHub actions were invented/released and GH Actions should be used by new, small projects.
      # I think. Maybe I'm wrong.
      #
      # - name: ðŸ‘¥ Clone appveyor repo
      #   working-directory: /tmp
      #   run: |
      #     gh repo clone sqlcollaborative/appveyor-lab
      #
      # I may need this 'pester stuff' eventually. I do not have these secrets set up.
      # - name: Run tests
      #   env:
      #     TENANTID: ${{secrets.TENANTID}}
      #     CLIENTID: ${{secrets.CLIENTID}}
      #     CLIENTSECRET: ${{secrets.CLIENTSECRET}}
      #   run: |
      #     $results = Invoke-Pester ./tests/gh-actions.ps1 -Output Detailed -PassThru
      #     if ($results.Result -ne "Passed") {
      #         throw "There were $($results.FailedCount) failed tests."
      #     }