# shamelessly borrowed from sqlcollabortive/dbatools/.github/workflows/tests.yml
name: Run SQL Tests
on: [push]
defaults:
  run:
    shell: pwsh
jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      # MSSQL_AGENT_ENABLED: True
      ACCEPT_EULA: Y
      MSSQL_PID: Developer
      SA_PASSWORD: ${{secrets.SAPASSWORD}}
      TEST_SQLINSTANCE: localhost
    steps:
      - uses: actions/checkout@v2

      #########
      # I am building this command up as I figure out what is available and what I can do
      #
      # I need a command to 'run stuff on SQL',
      # Maybe sqlserver isn't available. The docs I've read indicate that it would be, but when this ran, the log said that it couldn't find Invoke-Sqlcmd.
      # Using Invoke-SqlCmd2 would be better than installing all of dbatools, if I don't need all of dbatools.
      # using Invoke-Sqlcmd may also be an option, depending on what is already installed on your task runner.
      #
      - name: Install Pre-Requisites
        run: |
          # These next two lines are mainly just debugging
          # $PSVersionTable
          # Get-Module -listavailable -Name dbatools,sqlserver,pester
          # Setting 'trusted' was recommended by @potatoqualitee in a YouTube talk I watched 2021/07/30.
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted'
          #
          # 1.1.0 brings improved linux support.
          # https://github.com/sqlcollaborative/dbatools/releases/tag/v1.1.0
          # Install-Module -Name dbatools -RequiredVersion '1.0.161'
          Install-Module -Name dbatools -RequiredVersion '1.1.0'

      #########
      # original uses a pair of custom-built dbatools sql images. I changed that to use the generic images from MS.
      # I also removed the additional port mappings, I believe that's just for db mirroring (which gets tested using those images)
      # and we do not need that...
      #
      # I do not need two instances running and the version of SQL Server is not important, I'll keep this here for safekeeping.
      # docker run -p 14333:1433 -e ACCEPT_EULA=Y --network localnet --hostname dockersql2019 --name dockersql2019 --mount 'source=shared,target=/shared' -d mcr.microsoft.com/mssql/server:2019-latest
      #
      # I am not sure if I need to specify -e  sa_password=<SA_PASSWORD> here or if it 'gets it' from the above env: section
      # If I have to specify this a -e just for the password, I'm not sure of the exact syntax.
      # People say that MSSQL_SA_PASSWORD and SA_PASSWORD both work
      #
      - name:  Setup docker images
        run: |
          # create a shared volume
          # I think I need this if I am to restore a .bak into the container and/or copy a .dacpac into the container and publish
          # the .dacpac from there
          docker volume create shared
          #
          # setup container and expose port
          Write-Host "INFO:Start the mssql container"
          docker run -p 1433:1433 -e ACCEPT_EULA -e SA_PASSWORD -e MSSQL_PID --hostname dockersql2017 --name dockersql2017 --mount 'source=shared,target=/shared' -d mcr.microsoft.com/mssql/server:2017-latest
          #
          # I am guessing that we need this sleep here.
          sleep 10
          #

      - name:  Is MsSql Docker Container OK?
        run: |
          # DEBUGGING: Where are we, exactly? I need the path to the "Get Test info" PS1 files.
          get-childitem .
          #
          Write-Host "INFO:Load Credentials and ServerInstance"
          $cred = .\Tests\Get-TestSqlCredential.ps1
          $ServerInstance = .\Tests\Get-TestSqlInstance.ps1
          #
          Write-Host "INFO:Starting a query to dump out system stuff for troubleshooting"
          $Query = "select 'Try01' as EventName, GETDATE() RightNow, SUSER_SNAME() WhoamI, @@SERVERNAME as ServerName, @@VERSION as SqlServerVersion "
          Invoke-DbaQuery -SqlCredential $Cred -SqlInstance $ServerInstance -Query $Query

      - name: Publish a DACPAC to the SQL Server
        run: |
          Write-Host "INFO: Publish DACPAC"
          $Database = 'hwda'
          $exportFilePath = '.\Tests\Data\hwda.dacpac'
          #
          # FIXME: The fancy DbaTools Dac stuff is not available in Pwsh 7.x? Isn't 7.x what I used to locally test with?
          # In other words, from GH Actions: WARNING: [23:44:15][New-DbaDacOption] PowerShell Core is not supported, please use Windows PowerShell.
          # After some research, it seems that I'm using a Ubuntu task runner, which means I need a linux version of sqlpackage, which is
          # NOT what you get when we install the dbatools pre-requisite. In fact, there doesn't seem to be a linux version of sqlpackage,
          # though there was one and it seems like it was never officially released.
          # It _might_ be hinding someonwere in the mssql docker image. That means I'd have to copy the dacpac in there first, then exec
          # sqlpackage within the docker container and then we'd be good to go.
          #
          # Alternatively, I believe that I could switch from a Ubuntu runner to a Windows runner, and the code below here would
          # be good to go, even with it's jenky "find the sqlpackage.exe file" implementation.
          #
          #$options = New-DbaDacOption -Type Dacpac -Action Publish
          #$options.DeployOptions.DropObjectsNotInSource = $true
          #Publish-DbaDacPackage -Credential $Cred -SqlInstance $ENV:TEST_SQLINSTANCE -Database $Database -DacOption $options -Path $exportFilePath -EnableException
          #
          # First idea is running the sqlpackage.exe command line tool, which should get installed with DbaTools
          # I think that our usage here is simple enough to just use sqlpackage.exe, without a lot of XML command line drama.
          # The first trick is finding the tool so we can use it...
          $PackageToolPath = (get-module dbatools -ListAvailable | Select-Object -expand FileList)
          $PackageToolPath = Join-path -Path $PackageToolPath -ChildPath 'bin'
          $PackageToolPath = Join-path -Path $PackageToolPath -ChildPath 'smo'
          $PackageToolPath = Join-path -Path $PackageToolPath -ChildPath 'sqlpackage.exe'
          Set-Alias -Name "Invoke-SqlPackageTool" -Value $PackageToolPath -verbose
          #
          # the second trick is getting the complicated command line right...
          # FIXME: Commented out for debugging
          # If I go with a Windows task runner, I should just be able to use the dbatools\Publish-DbaDacPackage cmdlet, and
          # the weird calling interface below here and the wierd 'find the EXE and set an alias' code above here could be removed.
          # Invoke-SqlPackageTool  /a:Publish /tsn:$ENV:TEST_SQLINSTANCE /tdn:$Database /tu:sa /tp:$ENV:SA_PASSWORD /sf:$exportFilePath
          #
      - name: Initialize the data for testing
        run: |
          # The Docker mssql container from a prior step is still up, but you need to recreate the credential
          Write-Host "INFO:Load Credentials and ServerInstance"
          $cred = .\Tests\Get-TestSqlCredential.ps1
          $ServerInstance = .\Tests\Get-TestSqlInstance.ps1
          #
          Write-Host "INFO: Initialize the test data"
          #
          # debugging: does my database really exist?
          # FIXME: commented out for debugging
          #$Database = 'hwda'
          #$Query= "execute InitializeData.Initialize_All"
          $Database = 'master'
          $Query= "select 'DEBUGGING' EventName, name as dbn from sys.databases"
          Invoke-DbaQuery -SqlCredential $Cred -SqlInstance $ServerInstance -Database $Database  -query $Query


      - name: Run a test SQL Query
        run: |
          # The Docker mssql container from the prior step is still up, but you need to recreate the credential
          Write-Host "INFO:Load Credentials and ServerInstance"
          $cred = .\Tests\Get-TestSqlCredential.ps1
          $ServerInstance = .\Tests\Get-TestSqlInstance.ps1
          #
          Write-Host "INFO: Try a query"
          # FIXME: commented out for debugging
          #$Database = 'hwda'
          #$Query= "select top 10 * from [lookup].[State]"
          $Database = 'master'
          $Query= "select name from sys.databases d "
          Invoke-DbaQuery -SqlCredential $Cred -SqlInstance $ServerInstance -Database $Database -query $Query

      - name: Run Pester Tests
        run: |
          # The credential is rebuilt in the *.Tests.ps1 file(s)
          Invoke-Pester .\Tests
