# shamelessly borrowed from sqlcollabortive/dbatools/.github/workflows/tests.yml
name: Run SQL Tests
on: [push]
defaults:
  run:
    shell: pwsh
jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      # MSSQL_AGENT_ENABLED: True
      ACCEPT_EULA: Y
      MSSQL_PID: Developer
      SA_PASSWORD: ${{secrets.SAPASSWORD}}
      TEST_SQLINSTANCE: localhost
    steps:
      - uses: actions/checkout@v2

      #########
      - name: Install Pre-Requisites
        run: |
          # These next two lines are mainly just debugging
          # $PSVersionTable
          # Get-Module -listavailable -Name dbatools,sqlserver,pester
          # Setting 'trusted' was recommended by @potatoqualitee in a YouTube talk I watched 2021/07/30.
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted'
          Install-Module -Name dbatools -RequiredVersion '1.1.0'

      #########
      - name:  Setup docker images
        run: |
          # create a shared volume
          # I think I need this if I am to restore a .bak into the container and/or copy a .dacpac into the container and publish
          # the .dacpac from there
          docker volume create shared
          #
          # setup container and expose port
          Write-Host "INFO:Start the mssql container"
          docker run -p 1433:1433 -e ACCEPT_EULA -e SA_PASSWORD -e MSSQL_PID --hostname dockersql2017 --name dockersql2017 --mount 'source=shared,target=/shared' -d mcr.microsoft.com/mssql/server:2017-latest
          #
          # I am guessing that we need this sleep here.
          sleep 10
          #

      - name:  Is MsSql Docker Container OK?
        run: |
          Write-Host "INFO:Load Credentials and ServerInstance"
          $cred = .\Tests\Get-TestSqlCredential.ps1
          $ServerInstance = .\Tests\Get-TestSqlInstance.ps1
          #
          Write-Host "INFO:Starting a query to dump out system stuff for troubleshooting"
          $Query = "select 'Try01' as EventName, GETDATE() RightNow, SUSER_SNAME() WhoamI, @@SERVERNAME as ServerName, @@VERSION as SqlServerVersion "
          Invoke-DbaQuery -SqlCredential $Cred -SqlInstance $ServerInstance -Query $Query

      - name: Publish a DACPAC to the SQL Server to use as a test database"
        run: |
          Write-Host "INFO:Load Credentials and ServerInstance"
          $Cred = .\Tests\Get-TestSqlCredential.ps1
          $ServerInstance = .\Tests\Get-TestSqlInstance.ps1
          #
          Write-Host "INFO: Publish DACPAC"
          $Database = 'hwda'
          $exportFilePath = Join-Path -Path '.' -ChildPath 'Tests'
          $exportFilePath = Join-Path -Path $exportFilePath -ChildPath 'Data'
          $exportFilePath = Join-Path -Path $exportFilePath -ChildPath 'hwda.dacpac'
          #
          $options = New-DbaDacOption -Type Dacpac -Action Publish
          $options.DeployOptions.DropObjectsNotInSource = $true
          Publish-DbaDacPackage -SqlCredential $Cred -SqlInstance $ServerInstance -Database $Database -DacOption $options -Path $exportFilePath -EnableException

      - name: Initialize the data for testing
        run: |
          # If we are here, we've successfully published a dacpac, but those have no data in their tables.
          # This step is intended to run 'initialize procedures', which would insert "initial state" data and/or "unit test" data (like
          # test customers, orders, addresses and so forth)
          Write-Host "INFO:Load Credentials and ServerInstance"
          $cred = .\Tests\Get-TestSqlCredential.ps1
          $ServerInstance = .\Tests\Get-TestSqlInstance.ps1
          #
          Write-Host "INFO: Initialize the test data"
          $Database = 'hwda'
          $Query= "execute InitializeData.Initialize_All"
          Invoke-DbaQuery -SqlCredential $Cred -SqlInstance $ServerInstance -Database $Database  -query $Query

      - name: Run a SQL Query as a smoke-test
        run: |
          Write-Host "INFO:Load Credentials and ServerInstance"
          $cred = .\Tests\Get-TestSqlCredential.ps1
          $ServerInstance = .\Tests\Get-TestSqlInstance.ps1
          #
          Write-Host "INFO: Try a query"
          $Database = 'hwda'
          $Query= "select top 10 * from [lookup].[State]"
          Invoke-DbaQuery -SqlCredential $Cred -SqlInstance $ServerInstance -Database $Database -query $Query

      - name: Run Pester Tests
        run: |
          # The credential is rebuilt in the *.Tests.ps1 file(s)
          Invoke-Pester .\Tests
